{"ast":null,"code":"var _jsxFileName = \"/Users/amartyashankar/final copy 2/Projects/notedly/web/src/App.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect } from 'react';\nimport ReactDOM from 'react-dom';\nimport { ApolloClient, ApolloProvider, createHttpLink, InMemoryCache } from '@apollo/client';\nimport { setContext } from 'apollo-link-context';\nimport { IS_LOGGED_IN } from './gql/query';\nimport { requestNotificationPermission } from './notification';\n// import global styles\nimport GlobalStyle from './components/GlobalStyle';\n// import our routes\nimport Pages from './pages';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst uri = process.env.REACT_APP_API_URI;\nconst httpLink = createHttpLink({\n  uri\n});\nconst cache = new InMemoryCache();\n\n// return the headers to the context\nconst authLink = setContext((_, {\n  headers\n}) => {\n  return {\n    headers: {\n      ...headers,\n      authorization: localStorage.getItem('token') || ''\n    }\n  };\n});\n\n// create the Apollo client\nconst client = new ApolloClient({\n  link: authLink.concat(httpLink),\n  cache,\n  resolvers: {},\n  connectToDevTools: true\n});\n\n// check for a local token\nconst data = {\n  isLoggedIn: !!localStorage.getItem('token')\n};\n\n// write the cache data on initial load using writeQuery\nclient.cache.writeQuery({\n  query: IS_LOGGED_IN,\n  data\n});\n\n// write the cache data after cache is reset using writeQuery\nclient.onResetStore(() => {\n  client.cache.writeQuery({\n    query: IS_LOGGED_IN,\n    data\n  });\n});\nconst App = () => {\n  _s();\n  useEffect(() => {\n    requestNotificationPermission();\n  }, []);\n  return /*#__PURE__*/_jsxDEV(ApolloProvider, {\n    client: client,\n    children: [/*#__PURE__*/_jsxDEV(GlobalStyle, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Pages, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 64,\n    columnNumber: 5\n  }, this);\n};\n_s(App, \"OD7bBpZva5O2jO+Puf00hKivP7c=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useEffect","ReactDOM","ApolloClient","ApolloProvider","createHttpLink","InMemoryCache","setContext","IS_LOGGED_IN","requestNotificationPermission","GlobalStyle","Pages","jsxDEV","_jsxDEV","uri","process","env","REACT_APP_API_URI","httpLink","cache","authLink","_","headers","authorization","localStorage","getItem","client","link","concat","resolvers","connectToDevTools","data","isLoggedIn","writeQuery","query","onResetStore","App","_s","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/amartyashankar/final copy 2/Projects/notedly/web/src/App.js"],"sourcesContent":["import React, { useEffect } from 'react';\nimport ReactDOM from 'react-dom';\nimport {\n  ApolloClient,\n  ApolloProvider,\n  createHttpLink,\n  InMemoryCache\n} from '@apollo/client';\nimport { setContext } from 'apollo-link-context';\nimport { IS_LOGGED_IN } from './gql/query';\nimport { requestNotificationPermission } from './notification';\n// import global styles\nimport GlobalStyle from './components/GlobalStyle';\n// import our routes\nimport Pages from './pages';\n\nconst uri = process.env.REACT_APP_API_URI;\nconst httpLink = createHttpLink({ uri });\nconst cache = new InMemoryCache();\n\n// return the headers to the context\nconst authLink = setContext((_, { headers }) => {\n  return {\n    headers: {\n      ...headers,\n      authorization: localStorage.getItem('token') || ''\n    }\n  };\n});\n\n// create the Apollo client\nconst client = new ApolloClient({\n  link: authLink.concat(httpLink),\n  cache,\n  resolvers: {},\n  connectToDevTools: true\n});\n\n// check for a local token\nconst data = {\n  isLoggedIn: !!localStorage.getItem('token')\n};\n\n// write the cache data on initial load using writeQuery\nclient.cache.writeQuery({\n  query: IS_LOGGED_IN,\n  data\n});\n\n// write the cache data after cache is reset using writeQuery\nclient.onResetStore(() => {\n  client.cache.writeQuery({\n    query: IS_LOGGED_IN,\n    data\n  });\n});\n\nconst App = () => {\n  useEffect(() => {\n    requestNotificationPermission();\n  }, []);\n\n  return (\n    <ApolloProvider client={client}>\n      <GlobalStyle />\n      <Pages />\n    </ApolloProvider>\n  );\n};\n\nexport default App;\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,SAAS,QAAQ,OAAO;AACxC,OAAOC,QAAQ,MAAM,WAAW;AAChC,SACEC,YAAY,EACZC,cAAc,EACdC,cAAc,EACdC,aAAa,QACR,gBAAgB;AACvB,SAASC,UAAU,QAAQ,qBAAqB;AAChD,SAASC,YAAY,QAAQ,aAAa;AAC1C,SAASC,6BAA6B,QAAQ,gBAAgB;AAC9D;AACA,OAAOC,WAAW,MAAM,0BAA0B;AAClD;AACA,OAAOC,KAAK,MAAM,SAAS;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE5B,MAAMC,GAAG,GAAGC,OAAO,CAACC,GAAG,CAACC,iBAAiB;AACzC,MAAMC,QAAQ,GAAGb,cAAc,CAAC;EAAES;AAAI,CAAC,CAAC;AACxC,MAAMK,KAAK,GAAG,IAAIb,aAAa,CAAC,CAAC;;AAEjC;AACA,MAAMc,QAAQ,GAAGb,UAAU,CAAC,CAACc,CAAC,EAAE;EAAEC;AAAQ,CAAC,KAAK;EAC9C,OAAO;IACLA,OAAO,EAAE;MACP,GAAGA,OAAO;MACVC,aAAa,EAAEC,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC,IAAI;IAClD;EACF,CAAC;AACH,CAAC,CAAC;;AAEF;AACA,MAAMC,MAAM,GAAG,IAAIvB,YAAY,CAAC;EAC9BwB,IAAI,EAAEP,QAAQ,CAACQ,MAAM,CAACV,QAAQ,CAAC;EAC/BC,KAAK;EACLU,SAAS,EAAE,CAAC,CAAC;EACbC,iBAAiB,EAAE;AACrB,CAAC,CAAC;;AAEF;AACA,MAAMC,IAAI,GAAG;EACXC,UAAU,EAAE,CAAC,CAACR,YAAY,CAACC,OAAO,CAAC,OAAO;AAC5C,CAAC;;AAED;AACAC,MAAM,CAACP,KAAK,CAACc,UAAU,CAAC;EACtBC,KAAK,EAAE1B,YAAY;EACnBuB;AACF,CAAC,CAAC;;AAEF;AACAL,MAAM,CAACS,YAAY,CAAC,MAAM;EACxBT,MAAM,CAACP,KAAK,CAACc,UAAU,CAAC;IACtBC,KAAK,EAAE1B,YAAY;IACnBuB;EACF,CAAC,CAAC;AACJ,CAAC,CAAC;AAEF,MAAMK,GAAG,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAChBpC,SAAS,CAAC,MAAM;IACdQ,6BAA6B,CAAC,CAAC;EACjC,CAAC,EAAE,EAAE,CAAC;EAEN,oBACEI,OAAA,CAACT,cAAc;IAACsB,MAAM,EAAEA,MAAO;IAAAY,QAAA,gBAC7BzB,OAAA,CAACH,WAAW;MAAA6B,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC,eACf7B,OAAA,CAACF,KAAK;MAAA4B,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACK,CAAC;AAErB,CAAC;AAACL,EAAA,CAXID,GAAG;AAAAO,EAAA,GAAHP,GAAG;AAaT,eAAeA,GAAG;AAAC,IAAAO,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}