{"ast":null,"code":"var _jsxFileName = \"/Users/amartyashankar/final copy 2/Projects/notedly/web/src/pages/mytasks.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect } from 'react';\nimport { useQuery } from '@apollo/client';\nimport TaskFeed from '../components/TaskFeed';\nimport { GET_MY_TASKS } from '../gql/query';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst MyNotes = () => {\n  _s();\n  useEffect(() => {\n    // update the document title\n    document.title = 'My Tasks';\n  });\n  const {\n    loading,\n    error,\n    data\n  } = useQuery(GET_MY_TASKS);\n\n  // if the data is loading, our app will display a loading message\n  if (loading) return 'Loading...';\n  // if there is an error fetching the data, display an error message\n  if (error) return `Error! ${error.message}`;\n  // if the query is successful and there are notes, return the feed of notes\n  // else if the query is successful and there aren't notes, display a message\n  if (data.me.tasks.length !== 0) {\n    return /*#__PURE__*/_jsxDEV(TaskFeed, {\n      tasks: data.me.tasks\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 22,\n      columnNumber: 12\n    }, this);\n  } else {\n    return /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"No notes yet\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 24,\n      columnNumber: 12\n    }, this);\n  }\n};\n_s(MyNotes, \"DWAzq7+kjYOAqVKycDjm6WLSk9g=\", false, function () {\n  return [useQuery];\n});\n_c = MyNotes;\nexport default MyTasks;\nvar _c;\n$RefreshReg$(_c, \"MyNotes\");","map":{"version":3,"names":["React","useEffect","useQuery","TaskFeed","GET_MY_TASKS","jsxDEV","_jsxDEV","MyNotes","_s","document","title","loading","error","data","message","me","tasks","length","fileName","_jsxFileName","lineNumber","columnNumber","children","_c","MyTasks","$RefreshReg$"],"sources":["/Users/amartyashankar/final copy 2/Projects/notedly/web/src/pages/mytasks.js"],"sourcesContent":["import React, { useEffect } from 'react';\nimport { useQuery } from '@apollo/client';\n\nimport TaskFeed from '../components/TaskFeed';\nimport { GET_MY_TASKS } from '../gql/query';\n\nconst MyNotes = () => {\n  useEffect(() => {\n    // update the document title\n    document.title = 'My Tasks';\n  });\n\n  const { loading, error, data } = useQuery(GET_MY_TASKS);\n\n  // if the data is loading, our app will display a loading message\n  if (loading) return 'Loading...';\n  // if there is an error fetching the data, display an error message\n  if (error) return `Error! ${error.message}`;\n  // if the query is successful and there are notes, return the feed of notes\n  // else if the query is successful and there aren't notes, display a message\n  if (data.me.tasks.length !== 0) {\n    return <TaskFeed tasks={data.me.tasks} />;\n  } else {\n    return <p>No notes yet</p>;\n  }\n};\n\nexport default MyTasks;\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,SAAS,QAAQ,OAAO;AACxC,SAASC,QAAQ,QAAQ,gBAAgB;AAEzC,OAAOC,QAAQ,MAAM,wBAAwB;AAC7C,SAASC,YAAY,QAAQ,cAAc;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE5C,MAAMC,OAAO,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACpBP,SAAS,CAAC,MAAM;IACd;IACAQ,QAAQ,CAACC,KAAK,GAAG,UAAU;EAC7B,CAAC,CAAC;EAEF,MAAM;IAAEC,OAAO;IAAEC,KAAK;IAAEC;EAAK,CAAC,GAAGX,QAAQ,CAACE,YAAY,CAAC;;EAEvD;EACA,IAAIO,OAAO,EAAE,OAAO,YAAY;EAChC;EACA,IAAIC,KAAK,EAAE,OAAO,UAAUA,KAAK,CAACE,OAAO,EAAE;EAC3C;EACA;EACA,IAAID,IAAI,CAACE,EAAE,CAACC,KAAK,CAACC,MAAM,KAAK,CAAC,EAAE;IAC9B,oBAAOX,OAAA,CAACH,QAAQ;MAACa,KAAK,EAAEH,IAAI,CAACE,EAAE,CAACC;IAAM;MAAAE,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC;EAC3C,CAAC,MAAM;IACL,oBAAOf,OAAA;MAAAgB,QAAA,EAAG;IAAY;MAAAJ,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAG,CAAC;EAC5B;AACF,CAAC;AAACb,EAAA,CAnBID,OAAO;EAAA,QAMsBL,QAAQ;AAAA;AAAAqB,EAAA,GANrChB,OAAO;AAqBb,eAAeiB,OAAO;AAAC,IAAAD,EAAA;AAAAE,YAAA,CAAAF,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}