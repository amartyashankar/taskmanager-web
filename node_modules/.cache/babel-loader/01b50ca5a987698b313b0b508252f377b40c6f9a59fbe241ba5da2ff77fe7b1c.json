{"ast":null,"code":"var _jsxFileName = \"/Users/amartyashankar/final copy 2/Projects/notedly/web/src/pages/new.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect } from 'react';\nimport { useMutation } from '@apollo/client';\nimport { useNavigate } from 'react-router-dom'; // useNavigate for redirection\n\nimport NoteForm from '../components/NoteForm';\nimport { NEW_NOTE } from '../gql/mutation';\nimport { GET_MY_NOTES, GET_NOTES } from '../gql/query';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst NewNote = () => {\n  _s();\n  const navigate = useNavigate(); // Hook for navigation\n\n  useEffect(() => {\n    // update the document title on mount\n    document.title = 'New Note — Notedly';\n  }, []); // Empty dependency array ensures this runs only on mount\n\n  const [newTask, {\n    loading,\n    error\n  }] = useMutation(NEW_NOTE, {\n    // refetch the GET_NOTES and GET_MY_NOTES queries to update the cache\n    refetchQueries: [{\n      query: GET_MY_NOTES\n    }, {\n      query: GET_NOTES\n    }],\n    onCompleted: data => {\n      // Redirect the user to the note page after mutation completion\n      navigate(`/note/${data.newTask.id}`); // Using useNavigate hook for redirection\n    }\n  });\n  return /*#__PURE__*/_jsxDEV(React.Fragment, {\n    children: [loading && /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Saving your note...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 29,\n      columnNumber: 19\n    }, this), error && /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"Error saving the note: \", error.message]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 17\n    }, this), /*#__PURE__*/_jsxDEV(NoteForm, {\n      action: newTask\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 27,\n    columnNumber: 5\n  }, this);\n};\n_s(NewNote, \"+PVJx01VtCDeB8SKpSWdzzS4Hbk=\", false, function () {\n  return [useNavigate, useMutation];\n});\n_c = NewNote;\nexport default NewNote;\nvar _c;\n$RefreshReg$(_c, \"NewNote\");","map":{"version":3,"names":["React","useEffect","useMutation","useNavigate","NoteForm","NEW_NOTE","GET_MY_NOTES","GET_NOTES","jsxDEV","_jsxDEV","NewNote","_s","navigate","document","title","newTask","loading","error","refetchQueries","query","onCompleted","data","id","Fragment","children","fileName","_jsxFileName","lineNumber","columnNumber","message","action","_c","$RefreshReg$"],"sources":["/Users/amartyashankar/final copy 2/Projects/notedly/web/src/pages/new.js"],"sourcesContent":["import React, { useEffect } from 'react';\nimport { useMutation } from '@apollo/client';\nimport { useNavigate } from 'react-router-dom'; // useNavigate for redirection\n\nimport NoteForm from '../components/NoteForm';\nimport { NEW_NOTE } from '../gql/mutation';\nimport { GET_MY_NOTES, GET_NOTES } from '../gql/query';\n\nconst NewNote = () => {\n  const navigate = useNavigate(); // Hook for navigation\n\n  useEffect(() => {\n    // update the document title on mount\n    document.title = 'New Note — Notedly';\n  }, []); // Empty dependency array ensures this runs only on mount\n\n  const [newTask, { loading, error }] = useMutation(NEW_NOTE, {\n    // refetch the GET_NOTES and GET_MY_NOTES queries to update the cache\n    refetchQueries: [{ query: GET_MY_NOTES }, { query: GET_NOTES }],\n    onCompleted: (data) => {\n      // Redirect the user to the note page after mutation completion\n      navigate(`/note/${data.newTask.id}`); // Using useNavigate hook for redirection\n    },\n  });\n\n  return (\n    <React.Fragment>\n      {/* Show loading message while the mutation is in progress */}\n      {loading && <p>Saving your note...</p>}\n\n      {/* Show error message if the mutation fails */}\n      {error && <p>Error saving the note: {error.message}</p>}\n\n      {/* Render NoteForm and pass the mutation function as a prop */}\n      <NoteForm action={newTask} />\n    </React.Fragment>\n  );\n};\n\nexport default NewNote;\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,SAAS,QAAQ,OAAO;AACxC,SAASC,WAAW,QAAQ,gBAAgB;AAC5C,SAASC,WAAW,QAAQ,kBAAkB,CAAC,CAAC;;AAEhD,OAAOC,QAAQ,MAAM,wBAAwB;AAC7C,SAASC,QAAQ,QAAQ,iBAAiB;AAC1C,SAASC,YAAY,EAAEC,SAAS,QAAQ,cAAc;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEvD,MAAMC,OAAO,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACpB,MAAMC,QAAQ,GAAGT,WAAW,CAAC,CAAC,CAAC,CAAC;;EAEhCF,SAAS,CAAC,MAAM;IACd;IACAY,QAAQ,CAACC,KAAK,GAAG,oBAAoB;EACvC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC;;EAER,MAAM,CAACC,OAAO,EAAE;IAAEC,OAAO;IAAEC;EAAM,CAAC,CAAC,GAAGf,WAAW,CAACG,QAAQ,EAAE;IAC1D;IACAa,cAAc,EAAE,CAAC;MAAEC,KAAK,EAAEb;IAAa,CAAC,EAAE;MAAEa,KAAK,EAAEZ;IAAU,CAAC,CAAC;IAC/Da,WAAW,EAAGC,IAAI,IAAK;MACrB;MACAT,QAAQ,CAAC,SAASS,IAAI,CAACN,OAAO,CAACO,EAAE,EAAE,CAAC,CAAC,CAAC;IACxC;EACF,CAAC,CAAC;EAEF,oBACEb,OAAA,CAACT,KAAK,CAACuB,QAAQ;IAAAC,QAAA,GAEZR,OAAO,iBAAIP,OAAA;MAAAe,QAAA,EAAG;IAAmB;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAG,CAAC,EAGrCX,KAAK,iBAAIR,OAAA;MAAAe,QAAA,GAAG,yBAAuB,EAACP,KAAK,CAACY,OAAO;IAAA;MAAAJ,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eAGvDnB,OAAA,CAACL,QAAQ;MAAC0B,MAAM,EAAEf;IAAQ;MAAAU,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACf,CAAC;AAErB,CAAC;AAACjB,EAAA,CA7BID,OAAO;EAAA,QACMP,WAAW,EAOUD,WAAW;AAAA;AAAA6B,EAAA,GAR7CrB,OAAO;AA+Bb,eAAeA,OAAO;AAAC,IAAAqB,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}