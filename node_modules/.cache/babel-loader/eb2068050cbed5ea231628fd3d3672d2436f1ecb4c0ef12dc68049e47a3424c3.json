{"ast":null,"code":"var _jsxFileName = \"/Users/amartyashankar/final copy 2/Projects/notedly/web/src/pages/edit.js\",\n  _s = $RefreshSig$();\nimport React from 'react';\nimport { useMutation, useQuery } from '@apollo/client';\nimport { useParams, useNavigate } from 'react-router-dom';\n\n// import the NoteForm component\nimport NoteForm from '../components/NoteForm';\nimport { GET_NOTE, GET_ME } from '../gql/query';\nimport { EDIT_NOTE } from '../gql/mutation';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst EditNote = () => {\n  _s();\n  // Get the `id` from the URL parameters\n  const {\n    id\n  } = useParams();\n  const navigate = useNavigate();\n\n  // Query to get the note by ID\n  const {\n    loading,\n    error,\n    data\n  } = useQuery(GET_NOTE, {\n    variables: {\n      id\n    }\n  });\n  // Query to get the current user\n  const {\n    data: userdata\n  } = useQuery(GET_ME);\n\n  // Define the editNote mutation\n  const [editNote] = useMutation(EDIT_NOTE, {\n    variables: {\n      id\n    },\n    onCompleted: () => {\n      navigate(`/note/${id}`);\n    }\n  });\n\n  // If the data is loading, display a loading message\n  if (loading) return 'Loading...';\n  // If there is an error fetching the data, display an error message\n  if (error) return /*#__PURE__*/_jsxDEV(\"p\", {\n    children: \"Error!\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 31,\n    columnNumber: 21\n  }, this);\n  // If the current user and the author of the note do not match\n  if (userdata.me.id !== data.task.author.id) {\n    return /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"You do not have access to edit this note\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 12\n    }, this);\n  }\n\n  // Pass the data and mutation to the form component\n  return /*#__PURE__*/_jsxDEV(NoteForm, {\n    status: data.task.status,\n    action: editNote\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 38,\n    columnNumber: 10\n  }, this);\n};\n_s(EditNote, \"ySFqUsTiyTaaml1C8nADoE/bh4A=\", false, function () {\n  return [useParams, useNavigate, useQuery, useQuery, useMutation];\n});\n_c = EditNote;\nexport default EditNote;\nvar _c;\n$RefreshReg$(_c, \"EditNote\");","map":{"version":3,"names":["React","useMutation","useQuery","useParams","useNavigate","NoteForm","GET_NOTE","GET_ME","EDIT_NOTE","jsxDEV","_jsxDEV","EditNote","_s","id","navigate","loading","error","data","variables","userdata","editNote","onCompleted","children","fileName","_jsxFileName","lineNumber","columnNumber","me","task","author","status","action","_c","$RefreshReg$"],"sources":["/Users/amartyashankar/final copy 2/Projects/notedly/web/src/pages/edit.js"],"sourcesContent":["import React from 'react';\nimport { useMutation, useQuery } from '@apollo/client';\nimport { useParams, useNavigate } from 'react-router-dom';\n\n// import the NoteForm component\nimport NoteForm from '../components/NoteForm';\nimport { GET_NOTE, GET_ME } from '../gql/query';\nimport { EDIT_NOTE } from '../gql/mutation';\n\nconst EditNote = () => {\n  // Get the `id` from the URL parameters\n  const { id } = useParams();\n  const navigate = useNavigate();\n\n  // Query to get the note by ID\n  const { loading, error, data } = useQuery(GET_NOTE, { variables: { id } });\n  // Query to get the current user\n  const { data: userdata } = useQuery(GET_ME);\n\n  // Define the editNote mutation\n  const [editNote] = useMutation(EDIT_NOTE, {\n    variables: { id },\n    onCompleted: () => {\n      navigate(`/note/${id}`);\n    }\n  });\n\n  // If the data is loading, display a loading message\n  if (loading) return 'Loading...';\n  // If there is an error fetching the data, display an error message\n  if (error) return <p>Error!</p>;\n  // If the current user and the author of the note do not match\n  if (userdata.me.id !== data.task.author.id) {\n    return <p>You do not have access to edit this note</p>;\n  }\n\n  // Pass the data and mutation to the form component\n  return <NoteForm status={data.task.status} action={editNote} />;\n};\n\nexport default EditNote;\n"],"mappings":";;AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,SAASC,WAAW,EAAEC,QAAQ,QAAQ,gBAAgB;AACtD,SAASC,SAAS,EAAEC,WAAW,QAAQ,kBAAkB;;AAEzD;AACA,OAAOC,QAAQ,MAAM,wBAAwB;AAC7C,SAASC,QAAQ,EAAEC,MAAM,QAAQ,cAAc;AAC/C,SAASC,SAAS,QAAQ,iBAAiB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE5C,MAAMC,QAAQ,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACrB;EACA,MAAM;IAAEC;EAAG,CAAC,GAAGV,SAAS,CAAC,CAAC;EAC1B,MAAMW,QAAQ,GAAGV,WAAW,CAAC,CAAC;;EAE9B;EACA,MAAM;IAAEW,OAAO;IAAEC,KAAK;IAAEC;EAAK,CAAC,GAAGf,QAAQ,CAACI,QAAQ,EAAE;IAAEY,SAAS,EAAE;MAAEL;IAAG;EAAE,CAAC,CAAC;EAC1E;EACA,MAAM;IAAEI,IAAI,EAAEE;EAAS,CAAC,GAAGjB,QAAQ,CAACK,MAAM,CAAC;;EAE3C;EACA,MAAM,CAACa,QAAQ,CAAC,GAAGnB,WAAW,CAACO,SAAS,EAAE;IACxCU,SAAS,EAAE;MAAEL;IAAG,CAAC;IACjBQ,WAAW,EAAEA,CAAA,KAAM;MACjBP,QAAQ,CAAC,SAASD,EAAE,EAAE,CAAC;IACzB;EACF,CAAC,CAAC;;EAEF;EACA,IAAIE,OAAO,EAAE,OAAO,YAAY;EAChC;EACA,IAAIC,KAAK,EAAE,oBAAON,OAAA;IAAAY,QAAA,EAAG;EAAM;IAAAC,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAG,CAAC;EAC/B;EACA,IAAIP,QAAQ,CAACQ,EAAE,CAACd,EAAE,KAAKI,IAAI,CAACW,IAAI,CAACC,MAAM,CAAChB,EAAE,EAAE;IAC1C,oBAAOH,OAAA;MAAAY,QAAA,EAAG;IAAwC;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAG,CAAC;EACxD;;EAEA;EACA,oBAAOhB,OAAA,CAACL,QAAQ;IAACyB,MAAM,EAAEb,IAAI,CAACW,IAAI,CAACE,MAAO;IAACC,MAAM,EAAEX;EAAS;IAAAG,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAE,CAAC;AACjE,CAAC;AAACd,EAAA,CA7BID,QAAQ;EAAA,QAEGR,SAAS,EACPC,WAAW,EAGKF,QAAQ,EAEdA,QAAQ,EAGhBD,WAAW;AAAA;AAAA+B,EAAA,GAX1BrB,QAAQ;AA+Bd,eAAeA,QAAQ;AAAC,IAAAqB,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}