{"ast":null,"code":"var _jsxFileName = \"/Users/amartyashankar/final copy 2/Projects/notedly/web/src/components/FavoriteTask.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport { useMutation } from '@apollo/client';\nimport ButtonAsLink from './ButtonAsLink';\nimport { TOGGLE_FAVORITE } from '../gql/mutation';\nimport { GET_MY_FAVORITES } from '../gql/query';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst FavoriteTask = props => {\n  _s();\n  // store the note's favorite count as state\n  const [count, setCount] = useState(props.favoriteCount);\n  // store if the user has favorited the note as state\n  const [favorited, setFavorited] = useState(\n  // check if the note exists in the user favorites list\n  props.me.favorites.filter(task => task.id === props.taskId).length > 0);\n\n  // toggleFavorite mutation hook\n  const [toggleFavorite] = useMutation(TOGGLE_FAVORITE, {\n    variables: {\n      id: props.taskId\n    },\n    // refetch the GET_MY_FAVORITES query to update the cache\n    refetchQueries: [{\n      query: GET_MY_FAVORITES\n    }]\n  });\n\n  // if the user has favorited the note display the option to remove the favorite\n  // else display the option to add as a favorite\n  return /*#__PURE__*/_jsxDEV(React.Fragment, {\n    children: [favorited ? /*#__PURE__*/_jsxDEV(ButtonAsLink, {\n      onClick: () => {\n        toggleFavorite();\n        setFavorited(false);\n        setCount(count - 1);\n      },\n      \"data-cy\": \"favorite\",\n      children: \"Remove Favorite\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(ButtonAsLink, {\n      onClick: () => {\n        toggleFavorite();\n        setFavorited(true);\n        setCount(count + 1);\n      },\n      \"data-cy\": \"favorite\",\n      children: \"Add Favorite\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 9\n    }, this), \": \", count]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 29,\n    columnNumber: 5\n  }, this);\n};\n_s(FavoriteTask, \"ChvHmmAC2y7wWPdJ7JNECXtKATg=\", false, function () {\n  return [useMutation];\n});\n_c = FavoriteTask;\nexport default FavoriteTask;\nvar _c;\n$RefreshReg$(_c, \"FavoriteTask\");","map":{"version":3,"names":["React","useState","useMutation","ButtonAsLink","TOGGLE_FAVORITE","GET_MY_FAVORITES","jsxDEV","_jsxDEV","FavoriteTask","props","_s","count","setCount","favoriteCount","favorited","setFavorited","me","favorites","filter","task","id","taskId","length","toggleFavorite","variables","refetchQueries","query","Fragment","children","onClick","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/amartyashankar/final copy 2/Projects/notedly/web/src/components/FavoriteTask.js"],"sourcesContent":["import React, { useState } from 'react';\nimport { useMutation } from '@apollo/client';\n\nimport ButtonAsLink from './ButtonAsLink';\nimport { TOGGLE_FAVORITE } from '../gql/mutation';\nimport { GET_MY_FAVORITES } from '../gql/query';\n\nconst FavoriteTask = props => {\n  // store the note's favorite count as state\n  const [count, setCount] = useState(props.favoriteCount);\n  // store if the user has favorited the note as state\n  const [favorited, setFavorited] = useState(\n    // check if the note exists in the user favorites list\n    props.me.favorites.filter(task => task.id === props.taskId).length > 0\n  );\n\n  // toggleFavorite mutation hook\n  const [toggleFavorite] = useMutation(TOGGLE_FAVORITE, {\n    variables: {\n      id: props.taskId\n    },\n    // refetch the GET_MY_FAVORITES query to update the cache\n    refetchQueries: [{ query: GET_MY_FAVORITES }]\n  });\n\n  // if the user has favorited the note display the option to remove the favorite\n  // else display the option to add as a favorite\n  return (\n    <React.Fragment>\n      {favorited ? (\n        <ButtonAsLink\n          onClick={() => {\n            toggleFavorite();\n            setFavorited(false);\n            setCount(count - 1);\n          }}\n          data-cy=\"favorite\"\n        >\n          Remove Favorite\n        </ButtonAsLink>\n      ) : (\n        <ButtonAsLink\n          onClick={() => {\n            toggleFavorite();\n            setFavorited(true);\n            setCount(count + 1);\n          }}\n          data-cy=\"favorite\"\n        >\n          Add Favorite\n        </ButtonAsLink>\n      )}\n      : {count}\n    </React.Fragment>\n  );\n};\n\nexport default FavoriteTask;\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AACvC,SAASC,WAAW,QAAQ,gBAAgB;AAE5C,OAAOC,YAAY,MAAM,gBAAgB;AACzC,SAASC,eAAe,QAAQ,iBAAiB;AACjD,SAASC,gBAAgB,QAAQ,cAAc;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEhD,MAAMC,YAAY,GAAGC,KAAK,IAAI;EAAAC,EAAA;EAC5B;EACA,MAAM,CAACC,KAAK,EAAEC,QAAQ,CAAC,GAAGX,QAAQ,CAACQ,KAAK,CAACI,aAAa,CAAC;EACvD;EACA,MAAM,CAACC,SAAS,EAAEC,YAAY,CAAC,GAAGd,QAAQ;EACxC;EACAQ,KAAK,CAACO,EAAE,CAACC,SAAS,CAACC,MAAM,CAACC,IAAI,IAAIA,IAAI,CAACC,EAAE,KAAKX,KAAK,CAACY,MAAM,CAAC,CAACC,MAAM,GAAG,CACvE,CAAC;;EAED;EACA,MAAM,CAACC,cAAc,CAAC,GAAGrB,WAAW,CAACE,eAAe,EAAE;IACpDoB,SAAS,EAAE;MACTJ,EAAE,EAAEX,KAAK,CAACY;IACZ,CAAC;IACD;IACAI,cAAc,EAAE,CAAC;MAAEC,KAAK,EAAErB;IAAiB,CAAC;EAC9C,CAAC,CAAC;;EAEF;EACA;EACA,oBACEE,OAAA,CAACP,KAAK,CAAC2B,QAAQ;IAAAC,QAAA,GACZd,SAAS,gBACRP,OAAA,CAACJ,YAAY;MACX0B,OAAO,EAAEA,CAAA,KAAM;QACbN,cAAc,CAAC,CAAC;QAChBR,YAAY,CAAC,KAAK,CAAC;QACnBH,QAAQ,CAACD,KAAK,GAAG,CAAC,CAAC;MACrB,CAAE;MACF,WAAQ,UAAU;MAAAiB,QAAA,EACnB;IAED;MAAAE,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAc,CAAC,gBAEf1B,OAAA,CAACJ,YAAY;MACX0B,OAAO,EAAEA,CAAA,KAAM;QACbN,cAAc,CAAC,CAAC;QAChBR,YAAY,CAAC,IAAI,CAAC;QAClBH,QAAQ,CAACD,KAAK,GAAG,CAAC,CAAC;MACrB,CAAE;MACF,WAAQ,UAAU;MAAAiB,QAAA,EACnB;IAED;MAAAE,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAc,CACf,EAAC,IACA,EAACtB,KAAK;EAAA;IAAAmB,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACM,CAAC;AAErB,CAAC;AAACvB,EAAA,CAhDIF,YAAY;EAAA,QAUSN,WAAW;AAAA;AAAAgC,EAAA,GAVhC1B,YAAY;AAkDlB,eAAeA,YAAY;AAAC,IAAA0B,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}